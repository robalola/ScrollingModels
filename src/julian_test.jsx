/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import React, { useEffect, useRef, memo, useState } from "react";
import {
  useGLTF,
  PerspectiveCamera,
  useAnimations,
  useScroll,
  Grid,
  Environment,
  AccumulativeShadows,
  RandomizedLight,
  Html,
} from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useControls } from "leva";

export default function JulianTest(props) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF(
    "./julian_test/julian_cam.glb"
  );

  const { actions } = useAnimations(animations, group);
  console.log(actions);
  const scroll = useScroll();

  useEffect(() => {
    actions["CameraMove_1"].play().paused = true;
  }, []);
  useFrame(() => {
    actions["CameraMove_1"].time =
      actions["CameraMove_1"].getClip().duration * scroll.offset;
  });

  const { gridSize, ...gridConfig } = useControls({
    gridSize: [10.5, 10.5],
    cellSize: { value: 0.6, min: 0, max: 10, step: 0.1 },
    cellThickness: { value: 1, min: 0, max: 5, step: 0.1 },
    cellColor: "#6f6f6f",
    sectionSize: { value: 3.3, min: 0, max: 10, step: 0.1 },
    sectionThickness: { value: 1.5, min: 0, max: 5, step: 0.1 },
    sectionColor: "#9d4b4b",
    fadeDistance: { value: 25, min: 0, max: 100, step: 1 },
    fadeStrength: { value: 1, min: 0, max: 1, step: 0.1 },
    followCamera: false,
    infiniteGrid: true,
  });
  return (
    <group ref={group} {...props} dispose={null}>
      <group castShadow name="Scene">
        <mesh
          name="Water"
          geometry={nodes.Water.geometry}
          material={materials["Material.001"]}
          position={[0.959, 0.164, 2.382]}
        />
        <PerspectiveCamera
          name="Camera"
          makeDefault={true}
          far={100}
          near={0.1}
          fov={22.895}
          position={[-12.42, 12.857, 2.241]}
          rotation={[-1.381, -0.749, -1.296]}
        />
        <mesh
          name="Cube"
          castShadow
          receiveShadow
          geometry={nodes.Cube.geometry}
          material={materials["Material.002"]}
        />
        <mesh
          name="River"
          castShadow
          receiveShadow
          geometry={nodes.River.geometry}
          material={materials["Material.001"]}
          position={[0.277, 0.59, 0.015]}
        />
        <mesh
          name="Retopo_Shape008_09_-_Default_0001"
          castShadow
          receiveShadow
          geometry={nodes["Retopo_Shape008_09_-_Default_0001"].geometry}
          material={nodes["Retopo_Shape008_09_-_Default_0001"].material}
          position={[0.755, 0.93, 2.483]}
        />
        <mesh
          name="Boiler_room_building"
          castShadow
          receiveShadow
          geometry={nodes.Boiler_room_building.geometry}
          material={materials.Material}
          position={[1.102, 0.639, -0.917]}
        />
        <mesh
          name="Flanged_pipe"
          castShadow
          receiveShadow
          geometry={nodes.Flanged_pipe.geometry}
          material={materials.Material}
          position={[0.536, 0.713, -0.78]}
        />
        <mesh
          name="L_flanged_pipe"
          castShadow
          receiveShadow
          geometry={nodes.L_flanged_pipe.geometry}
          material={nodes.L_flanged_pipe.material}
          position={[0.624, 0.918, 2.473]}
        />
      </group>
      <Environment preset="city" />
      <Shadows />
      <Grid position={[0, -1, 0]} args={gridSize} {...gridConfig} />
    </group>
  );
}

const Shadows = memo(() => (
  <AccumulativeShadows
    temporal
    frames={100}
    color="#9d4b4b"
    colorBlend={0.5}
    alphaTest={0.9}
    scale={20}
  >
    <RandomizedLight amount={8} radius={4} position={[5, 5, -10]} />
  </AccumulativeShadows>
));

useGLTF.preload("./julian_test/julian_cam.glb");
